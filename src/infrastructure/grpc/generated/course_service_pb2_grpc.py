# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import course_service_pb2 as course__service__pb2

GRPC_GENERATED_VERSION = '1.65.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in course_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class CourseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCourse = channel.unary_unary(
                '/course.CourseService/CreateCourse',
                request_serializer=course__service__pb2.CreateCourseRequest.SerializeToString,
                response_deserializer=course__service__pb2.CourseResponse.FromString,
                _registered_method=True)
        self.GetCourse = channel.unary_unary(
                '/course.CourseService/GetCourse',
                request_serializer=course__service__pb2.GetCourseRequest.SerializeToString,
                response_deserializer=course__service__pb2.CourseResponse.FromString,
                _registered_method=True)
        self.GetCourseBySlug = channel.unary_unary(
                '/course.CourseService/GetCourseBySlug',
                request_serializer=course__service__pb2.GetCourseBySlugRequest.SerializeToString,
                response_deserializer=course__service__pb2.CourseResponse.FromString,
                _registered_method=True)
        self.GetAllCourse = channel.unary_unary(
                '/course.CourseService/GetAllCourse',
                request_serializer=course__service__pb2.GetAllCoursesRequest.SerializeToString,
                response_deserializer=course__service__pb2.CoursesResponse.FromString,
                _registered_method=True)
        self.UpdateCourse = channel.unary_unary(
                '/course.CourseService/UpdateCourse',
                request_serializer=course__service__pb2.UpdateCourseRequest.SerializeToString,
                response_deserializer=course__service__pb2.CourseResponse.FromString,
                _registered_method=True)
        self.DeleteCourse = channel.unary_unary(
                '/course.CourseService/DeleteCourse',
                request_serializer=course__service__pb2.DeleteCourseRequest.SerializeToString,
                response_deserializer=course__service__pb2.DeleteCourseResponse.FromString,
                _registered_method=True)
        self.GetCoursesByInstructor = channel.unary_unary(
                '/course.CourseService/GetCoursesByInstructor',
                request_serializer=course__service__pb2.GetCoursesByInstructorRequest.SerializeToString,
                response_deserializer=course__service__pb2.CoursesResponse.FromString,
                _registered_method=True)
        self.GetEnrolledCourses = channel.unary_unary(
                '/course.CourseService/GetEnrolledCourses',
                request_serializer=course__service__pb2.GetEnrolledCoursesRequest.SerializeToString,
                response_deserializer=course__service__pb2.CoursesResponse.FromString,
                _registered_method=True)
        self.GetCoursesByIds = channel.unary_unary(
                '/course.CourseService/GetCoursesByIds',
                request_serializer=course__service__pb2.GetCoursesByIdsRequest.SerializeToString,
                response_deserializer=course__service__pb2.GetCoursesByIdsResponse.FromString,
                _registered_method=True)
        self.CreateSection = channel.unary_unary(
                '/course.CourseService/CreateSection',
                request_serializer=course__service__pb2.CreateSectionRequest.SerializeToString,
                response_deserializer=course__service__pb2.SectionResponse.FromString,
                _registered_method=True)
        self.GetSection = channel.unary_unary(
                '/course.CourseService/GetSection',
                request_serializer=course__service__pb2.GetSectionRequest.SerializeToString,
                response_deserializer=course__service__pb2.SectionResponse.FromString,
                _registered_method=True)
        self.UpdateSection = channel.unary_unary(
                '/course.CourseService/UpdateSection',
                request_serializer=course__service__pb2.UpdateSectionRequest.SerializeToString,
                response_deserializer=course__service__pb2.SectionResponse.FromString,
                _registered_method=True)
        self.DeleteSection = channel.unary_unary(
                '/course.CourseService/DeleteSection',
                request_serializer=course__service__pb2.DeleteSectionRequest.SerializeToString,
                response_deserializer=course__service__pb2.DeleteSectionResponse.FromString,
                _registered_method=True)
        self.GetSectionsByCourse = channel.unary_unary(
                '/course.CourseService/GetSectionsByCourse',
                request_serializer=course__service__pb2.GetSectionsByCourseRequest.SerializeToString,
                response_deserializer=course__service__pb2.SectionsResponse.FromString,
                _registered_method=True)
        self.CreateLesson = channel.unary_unary(
                '/course.CourseService/CreateLesson',
                request_serializer=course__service__pb2.CreateLessonRequest.SerializeToString,
                response_deserializer=course__service__pb2.LessonResponse.FromString,
                _registered_method=True)
        self.GetLesson = channel.unary_unary(
                '/course.CourseService/GetLesson',
                request_serializer=course__service__pb2.GetLessonRequest.SerializeToString,
                response_deserializer=course__service__pb2.LessonResponse.FromString,
                _registered_method=True)
        self.UpdateLesson = channel.unary_unary(
                '/course.CourseService/UpdateLesson',
                request_serializer=course__service__pb2.UpdateLessonRequest.SerializeToString,
                response_deserializer=course__service__pb2.LessonResponse.FromString,
                _registered_method=True)
        self.DeleteLesson = channel.unary_unary(
                '/course.CourseService/DeleteLesson',
                request_serializer=course__service__pb2.DeleteLessonRequest.SerializeToString,
                response_deserializer=course__service__pb2.DeleteLessonResponse.FromString,
                _registered_method=True)
        self.GetLessonsBySection = channel.unary_unary(
                '/course.CourseService/GetLessonsBySection',
                request_serializer=course__service__pb2.GetLessonsBySectionRequest.SerializeToString,
                response_deserializer=course__service__pb2.LessonsResponse.FromString,
                _registered_method=True)
        self.CreateQuiz = channel.unary_unary(
                '/course.CourseService/CreateQuiz',
                request_serializer=course__service__pb2.CreateQuizRequest.SerializeToString,
                response_deserializer=course__service__pb2.QuizResponse.FromString,
                _registered_method=True)
        self.GetQuiz = channel.unary_unary(
                '/course.CourseService/GetQuiz',
                request_serializer=course__service__pb2.GetQuizRequest.SerializeToString,
                response_deserializer=course__service__pb2.QuizResponse.FromString,
                _registered_method=True)
        self.UpdateQuiz = channel.unary_unary(
                '/course.CourseService/UpdateQuiz',
                request_serializer=course__service__pb2.UpdateQuizRequest.SerializeToString,
                response_deserializer=course__service__pb2.QuizResponse.FromString,
                _registered_method=True)
        self.DeleteQuiz = channel.unary_unary(
                '/course.CourseService/DeleteQuiz',
                request_serializer=course__service__pb2.DeleteQuizRequest.SerializeToString,
                response_deserializer=course__service__pb2.DeleteQuizResponse.FromString,
                _registered_method=True)
        self.GetQuizzesByCourse = channel.unary_unary(
                '/course.CourseService/GetQuizzesByCourse',
                request_serializer=course__service__pb2.GetQuizzesByCourseRequest.SerializeToString,
                response_deserializer=course__service__pb2.QuizzesResponse.FromString,
                _registered_method=True)
        self.CreateEnrollment = channel.unary_unary(
                '/course.CourseService/CreateEnrollment',
                request_serializer=course__service__pb2.CreateEnrollmentRequest.SerializeToString,
                response_deserializer=course__service__pb2.EnrollmentResponse.FromString,
                _registered_method=True)
        self.GetEnrollment = channel.unary_unary(
                '/course.CourseService/GetEnrollment',
                request_serializer=course__service__pb2.GetEnrollmentRequest.SerializeToString,
                response_deserializer=course__service__pb2.EnrollmentResponse.FromString,
                _registered_method=True)
        self.UpdateEnrollment = channel.unary_unary(
                '/course.CourseService/UpdateEnrollment',
                request_serializer=course__service__pb2.UpdateEnrollmentRequest.SerializeToString,
                response_deserializer=course__service__pb2.EnrollmentResponse.FromString,
                _registered_method=True)
        self.DeleteEnrollment = channel.unary_unary(
                '/course.CourseService/DeleteEnrollment',
                request_serializer=course__service__pb2.DeleteEnrollmentRequest.SerializeToString,
                response_deserializer=course__service__pb2.DeleteEnrollmentResponse.FromString,
                _registered_method=True)
        self.GetEnrollmentsByUser = channel.unary_unary(
                '/course.CourseService/GetEnrollmentsByUser',
                request_serializer=course__service__pb2.GetEnrollmentsByUserRequest.SerializeToString,
                response_deserializer=course__service__pb2.EnrollmentsResponse.FromString,
                _registered_method=True)
        self.GetEnrollmentsByCourse = channel.unary_unary(
                '/course.CourseService/GetEnrollmentsByCourse',
                request_serializer=course__service__pb2.GetEnrollmentsByCourseRequest.SerializeToString,
                response_deserializer=course__service__pb2.EnrollmentsResponse.FromString,
                _registered_method=True)
        self.CreateProgress = channel.unary_unary(
                '/course.CourseService/CreateProgress',
                request_serializer=course__service__pb2.CreateProgressRequest.SerializeToString,
                response_deserializer=course__service__pb2.ProgressResponse.FromString,
                _registered_method=True)
        self.GetProgress = channel.unary_unary(
                '/course.CourseService/GetProgress',
                request_serializer=course__service__pb2.GetProgressRequest.SerializeToString,
                response_deserializer=course__service__pb2.ProgressResponse.FromString,
                _registered_method=True)
        self.UpdateProgress = channel.unary_unary(
                '/course.CourseService/UpdateProgress',
                request_serializer=course__service__pb2.UpdateProgressRequest.SerializeToString,
                response_deserializer=course__service__pb2.ProgressResponse.FromString,
                _registered_method=True)
        self.DeleteProgress = channel.unary_unary(
                '/course.CourseService/DeleteProgress',
                request_serializer=course__service__pb2.DeleteProgressRequest.SerializeToString,
                response_deserializer=course__service__pb2.DeleteProgressResponse.FromString,
                _registered_method=True)
        self.GetProgressByEnrollment = channel.unary_unary(
                '/course.CourseService/GetProgressByEnrollment',
                request_serializer=course__service__pb2.GetProgressByEnrollmentRequest.SerializeToString,
                response_deserializer=course__service__pb2.ProgressesResponse.FromString,
                _registered_method=True)
        self.CreateReview = channel.unary_unary(
                '/course.CourseService/CreateReview',
                request_serializer=course__service__pb2.CreateReviewRequest.SerializeToString,
                response_deserializer=course__service__pb2.ReviewResponse.FromString,
                _registered_method=True)
        self.GetReview = channel.unary_unary(
                '/course.CourseService/GetReview',
                request_serializer=course__service__pb2.GetReviewRequest.SerializeToString,
                response_deserializer=course__service__pb2.ReviewResponse.FromString,
                _registered_method=True)
        self.UpdateReview = channel.unary_unary(
                '/course.CourseService/UpdateReview',
                request_serializer=course__service__pb2.UpdateReviewRequest.SerializeToString,
                response_deserializer=course__service__pb2.ReviewResponse.FromString,
                _registered_method=True)
        self.DeleteReview = channel.unary_unary(
                '/course.CourseService/DeleteReview',
                request_serializer=course__service__pb2.DeleteReviewRequest.SerializeToString,
                response_deserializer=course__service__pb2.DeleteReviewResponse.FromString,
                _registered_method=True)
        self.GetReviewsByCourse = channel.unary_unary(
                '/course.CourseService/GetReviewsByCourse',
                request_serializer=course__service__pb2.GetReviewsByCourseRequest.SerializeToString,
                response_deserializer=course__service__pb2.ReviewsResponse.FromString,
                _registered_method=True)


class CourseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateCourse(self, request, context):
        """Course CRUD
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCourse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCourseBySlug(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllCourse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCourse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCourse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCoursesByInstructor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnrolledCourses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCoursesByIds(self, request, context):
        """Get Courses by batch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSection(self, request, context):
        """Section CRUD
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSectionsByCourse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateLesson(self, request, context):
        """Lesson CRUD
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLesson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLesson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteLesson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLessonsBySection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateQuiz(self, request, context):
        """Quiz CRUD
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuiz(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateQuiz(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteQuiz(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuizzesByCourse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateEnrollment(self, request, context):
        """Enrollment CRUD
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnrollment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEnrollment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEnrollment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnrollmentsByUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEnrollmentsByCourse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateProgress(self, request, context):
        """Progress CRUD
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateProgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteProgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProgressByEnrollment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateReview(self, request, context):
        """Review CRUD
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReview(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateReview(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteReview(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReviewsByCourse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CourseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCourse': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCourse,
                    request_deserializer=course__service__pb2.CreateCourseRequest.FromString,
                    response_serializer=course__service__pb2.CourseResponse.SerializeToString,
            ),
            'GetCourse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCourse,
                    request_deserializer=course__service__pb2.GetCourseRequest.FromString,
                    response_serializer=course__service__pb2.CourseResponse.SerializeToString,
            ),
            'GetCourseBySlug': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCourseBySlug,
                    request_deserializer=course__service__pb2.GetCourseBySlugRequest.FromString,
                    response_serializer=course__service__pb2.CourseResponse.SerializeToString,
            ),
            'GetAllCourse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllCourse,
                    request_deserializer=course__service__pb2.GetAllCoursesRequest.FromString,
                    response_serializer=course__service__pb2.CoursesResponse.SerializeToString,
            ),
            'UpdateCourse': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCourse,
                    request_deserializer=course__service__pb2.UpdateCourseRequest.FromString,
                    response_serializer=course__service__pb2.CourseResponse.SerializeToString,
            ),
            'DeleteCourse': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCourse,
                    request_deserializer=course__service__pb2.DeleteCourseRequest.FromString,
                    response_serializer=course__service__pb2.DeleteCourseResponse.SerializeToString,
            ),
            'GetCoursesByInstructor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCoursesByInstructor,
                    request_deserializer=course__service__pb2.GetCoursesByInstructorRequest.FromString,
                    response_serializer=course__service__pb2.CoursesResponse.SerializeToString,
            ),
            'GetEnrolledCourses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnrolledCourses,
                    request_deserializer=course__service__pb2.GetEnrolledCoursesRequest.FromString,
                    response_serializer=course__service__pb2.CoursesResponse.SerializeToString,
            ),
            'GetCoursesByIds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCoursesByIds,
                    request_deserializer=course__service__pb2.GetCoursesByIdsRequest.FromString,
                    response_serializer=course__service__pb2.GetCoursesByIdsResponse.SerializeToString,
            ),
            'CreateSection': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSection,
                    request_deserializer=course__service__pb2.CreateSectionRequest.FromString,
                    response_serializer=course__service__pb2.SectionResponse.SerializeToString,
            ),
            'GetSection': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSection,
                    request_deserializer=course__service__pb2.GetSectionRequest.FromString,
                    response_serializer=course__service__pb2.SectionResponse.SerializeToString,
            ),
            'UpdateSection': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSection,
                    request_deserializer=course__service__pb2.UpdateSectionRequest.FromString,
                    response_serializer=course__service__pb2.SectionResponse.SerializeToString,
            ),
            'DeleteSection': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSection,
                    request_deserializer=course__service__pb2.DeleteSectionRequest.FromString,
                    response_serializer=course__service__pb2.DeleteSectionResponse.SerializeToString,
            ),
            'GetSectionsByCourse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSectionsByCourse,
                    request_deserializer=course__service__pb2.GetSectionsByCourseRequest.FromString,
                    response_serializer=course__service__pb2.SectionsResponse.SerializeToString,
            ),
            'CreateLesson': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLesson,
                    request_deserializer=course__service__pb2.CreateLessonRequest.FromString,
                    response_serializer=course__service__pb2.LessonResponse.SerializeToString,
            ),
            'GetLesson': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLesson,
                    request_deserializer=course__service__pb2.GetLessonRequest.FromString,
                    response_serializer=course__service__pb2.LessonResponse.SerializeToString,
            ),
            'UpdateLesson': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateLesson,
                    request_deserializer=course__service__pb2.UpdateLessonRequest.FromString,
                    response_serializer=course__service__pb2.LessonResponse.SerializeToString,
            ),
            'DeleteLesson': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteLesson,
                    request_deserializer=course__service__pb2.DeleteLessonRequest.FromString,
                    response_serializer=course__service__pb2.DeleteLessonResponse.SerializeToString,
            ),
            'GetLessonsBySection': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLessonsBySection,
                    request_deserializer=course__service__pb2.GetLessonsBySectionRequest.FromString,
                    response_serializer=course__service__pb2.LessonsResponse.SerializeToString,
            ),
            'CreateQuiz': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateQuiz,
                    request_deserializer=course__service__pb2.CreateQuizRequest.FromString,
                    response_serializer=course__service__pb2.QuizResponse.SerializeToString,
            ),
            'GetQuiz': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuiz,
                    request_deserializer=course__service__pb2.GetQuizRequest.FromString,
                    response_serializer=course__service__pb2.QuizResponse.SerializeToString,
            ),
            'UpdateQuiz': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateQuiz,
                    request_deserializer=course__service__pb2.UpdateQuizRequest.FromString,
                    response_serializer=course__service__pb2.QuizResponse.SerializeToString,
            ),
            'DeleteQuiz': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteQuiz,
                    request_deserializer=course__service__pb2.DeleteQuizRequest.FromString,
                    response_serializer=course__service__pb2.DeleteQuizResponse.SerializeToString,
            ),
            'GetQuizzesByCourse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuizzesByCourse,
                    request_deserializer=course__service__pb2.GetQuizzesByCourseRequest.FromString,
                    response_serializer=course__service__pb2.QuizzesResponse.SerializeToString,
            ),
            'CreateEnrollment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEnrollment,
                    request_deserializer=course__service__pb2.CreateEnrollmentRequest.FromString,
                    response_serializer=course__service__pb2.EnrollmentResponse.SerializeToString,
            ),
            'GetEnrollment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnrollment,
                    request_deserializer=course__service__pb2.GetEnrollmentRequest.FromString,
                    response_serializer=course__service__pb2.EnrollmentResponse.SerializeToString,
            ),
            'UpdateEnrollment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEnrollment,
                    request_deserializer=course__service__pb2.UpdateEnrollmentRequest.FromString,
                    response_serializer=course__service__pb2.EnrollmentResponse.SerializeToString,
            ),
            'DeleteEnrollment': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEnrollment,
                    request_deserializer=course__service__pb2.DeleteEnrollmentRequest.FromString,
                    response_serializer=course__service__pb2.DeleteEnrollmentResponse.SerializeToString,
            ),
            'GetEnrollmentsByUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnrollmentsByUser,
                    request_deserializer=course__service__pb2.GetEnrollmentsByUserRequest.FromString,
                    response_serializer=course__service__pb2.EnrollmentsResponse.SerializeToString,
            ),
            'GetEnrollmentsByCourse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEnrollmentsByCourse,
                    request_deserializer=course__service__pb2.GetEnrollmentsByCourseRequest.FromString,
                    response_serializer=course__service__pb2.EnrollmentsResponse.SerializeToString,
            ),
            'CreateProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProgress,
                    request_deserializer=course__service__pb2.CreateProgressRequest.FromString,
                    response_serializer=course__service__pb2.ProgressResponse.SerializeToString,
            ),
            'GetProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProgress,
                    request_deserializer=course__service__pb2.GetProgressRequest.FromString,
                    response_serializer=course__service__pb2.ProgressResponse.SerializeToString,
            ),
            'UpdateProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateProgress,
                    request_deserializer=course__service__pb2.UpdateProgressRequest.FromString,
                    response_serializer=course__service__pb2.ProgressResponse.SerializeToString,
            ),
            'DeleteProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteProgress,
                    request_deserializer=course__service__pb2.DeleteProgressRequest.FromString,
                    response_serializer=course__service__pb2.DeleteProgressResponse.SerializeToString,
            ),
            'GetProgressByEnrollment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProgressByEnrollment,
                    request_deserializer=course__service__pb2.GetProgressByEnrollmentRequest.FromString,
                    response_serializer=course__service__pb2.ProgressesResponse.SerializeToString,
            ),
            'CreateReview': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateReview,
                    request_deserializer=course__service__pb2.CreateReviewRequest.FromString,
                    response_serializer=course__service__pb2.ReviewResponse.SerializeToString,
            ),
            'GetReview': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReview,
                    request_deserializer=course__service__pb2.GetReviewRequest.FromString,
                    response_serializer=course__service__pb2.ReviewResponse.SerializeToString,
            ),
            'UpdateReview': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateReview,
                    request_deserializer=course__service__pb2.UpdateReviewRequest.FromString,
                    response_serializer=course__service__pb2.ReviewResponse.SerializeToString,
            ),
            'DeleteReview': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteReview,
                    request_deserializer=course__service__pb2.DeleteReviewRequest.FromString,
                    response_serializer=course__service__pb2.DeleteReviewResponse.SerializeToString,
            ),
            'GetReviewsByCourse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReviewsByCourse,
                    request_deserializer=course__service__pb2.GetReviewsByCourseRequest.FromString,
                    response_serializer=course__service__pb2.ReviewsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'course.CourseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('course.CourseService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CourseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateCourse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/CreateCourse',
            course__service__pb2.CreateCourseRequest.SerializeToString,
            course__service__pb2.CourseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCourse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetCourse',
            course__service__pb2.GetCourseRequest.SerializeToString,
            course__service__pb2.CourseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCourseBySlug(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetCourseBySlug',
            course__service__pb2.GetCourseBySlugRequest.SerializeToString,
            course__service__pb2.CourseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllCourse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetAllCourse',
            course__service__pb2.GetAllCoursesRequest.SerializeToString,
            course__service__pb2.CoursesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCourse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/UpdateCourse',
            course__service__pb2.UpdateCourseRequest.SerializeToString,
            course__service__pb2.CourseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCourse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/DeleteCourse',
            course__service__pb2.DeleteCourseRequest.SerializeToString,
            course__service__pb2.DeleteCourseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCoursesByInstructor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetCoursesByInstructor',
            course__service__pb2.GetCoursesByInstructorRequest.SerializeToString,
            course__service__pb2.CoursesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEnrolledCourses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetEnrolledCourses',
            course__service__pb2.GetEnrolledCoursesRequest.SerializeToString,
            course__service__pb2.CoursesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCoursesByIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetCoursesByIds',
            course__service__pb2.GetCoursesByIdsRequest.SerializeToString,
            course__service__pb2.GetCoursesByIdsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/CreateSection',
            course__service__pb2.CreateSectionRequest.SerializeToString,
            course__service__pb2.SectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetSection',
            course__service__pb2.GetSectionRequest.SerializeToString,
            course__service__pb2.SectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/UpdateSection',
            course__service__pb2.UpdateSectionRequest.SerializeToString,
            course__service__pb2.SectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/DeleteSection',
            course__service__pb2.DeleteSectionRequest.SerializeToString,
            course__service__pb2.DeleteSectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSectionsByCourse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetSectionsByCourse',
            course__service__pb2.GetSectionsByCourseRequest.SerializeToString,
            course__service__pb2.SectionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateLesson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/CreateLesson',
            course__service__pb2.CreateLessonRequest.SerializeToString,
            course__service__pb2.LessonResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLesson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetLesson',
            course__service__pb2.GetLessonRequest.SerializeToString,
            course__service__pb2.LessonResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateLesson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/UpdateLesson',
            course__service__pb2.UpdateLessonRequest.SerializeToString,
            course__service__pb2.LessonResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteLesson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/DeleteLesson',
            course__service__pb2.DeleteLessonRequest.SerializeToString,
            course__service__pb2.DeleteLessonResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLessonsBySection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetLessonsBySection',
            course__service__pb2.GetLessonsBySectionRequest.SerializeToString,
            course__service__pb2.LessonsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateQuiz(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/CreateQuiz',
            course__service__pb2.CreateQuizRequest.SerializeToString,
            course__service__pb2.QuizResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetQuiz(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetQuiz',
            course__service__pb2.GetQuizRequest.SerializeToString,
            course__service__pb2.QuizResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateQuiz(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/UpdateQuiz',
            course__service__pb2.UpdateQuizRequest.SerializeToString,
            course__service__pb2.QuizResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteQuiz(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/DeleteQuiz',
            course__service__pb2.DeleteQuizRequest.SerializeToString,
            course__service__pb2.DeleteQuizResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetQuizzesByCourse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetQuizzesByCourse',
            course__service__pb2.GetQuizzesByCourseRequest.SerializeToString,
            course__service__pb2.QuizzesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateEnrollment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/CreateEnrollment',
            course__service__pb2.CreateEnrollmentRequest.SerializeToString,
            course__service__pb2.EnrollmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEnrollment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetEnrollment',
            course__service__pb2.GetEnrollmentRequest.SerializeToString,
            course__service__pb2.EnrollmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateEnrollment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/UpdateEnrollment',
            course__service__pb2.UpdateEnrollmentRequest.SerializeToString,
            course__service__pb2.EnrollmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteEnrollment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/DeleteEnrollment',
            course__service__pb2.DeleteEnrollmentRequest.SerializeToString,
            course__service__pb2.DeleteEnrollmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEnrollmentsByUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetEnrollmentsByUser',
            course__service__pb2.GetEnrollmentsByUserRequest.SerializeToString,
            course__service__pb2.EnrollmentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEnrollmentsByCourse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetEnrollmentsByCourse',
            course__service__pb2.GetEnrollmentsByCourseRequest.SerializeToString,
            course__service__pb2.EnrollmentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/CreateProgress',
            course__service__pb2.CreateProgressRequest.SerializeToString,
            course__service__pb2.ProgressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetProgress',
            course__service__pb2.GetProgressRequest.SerializeToString,
            course__service__pb2.ProgressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/UpdateProgress',
            course__service__pb2.UpdateProgressRequest.SerializeToString,
            course__service__pb2.ProgressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/DeleteProgress',
            course__service__pb2.DeleteProgressRequest.SerializeToString,
            course__service__pb2.DeleteProgressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProgressByEnrollment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetProgressByEnrollment',
            course__service__pb2.GetProgressByEnrollmentRequest.SerializeToString,
            course__service__pb2.ProgressesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateReview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/CreateReview',
            course__service__pb2.CreateReviewRequest.SerializeToString,
            course__service__pb2.ReviewResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetReview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetReview',
            course__service__pb2.GetReviewRequest.SerializeToString,
            course__service__pb2.ReviewResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateReview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/UpdateReview',
            course__service__pb2.UpdateReviewRequest.SerializeToString,
            course__service__pb2.ReviewResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteReview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/DeleteReview',
            course__service__pb2.DeleteReviewRequest.SerializeToString,
            course__service__pb2.DeleteReviewResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetReviewsByCourse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetReviewsByCourse',
            course__service__pb2.GetReviewsByCourseRequest.SerializeToString,
            course__service__pb2.ReviewsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
